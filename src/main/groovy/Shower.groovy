/**
* Just a testing/playing groovy class that parses description files generated by Audacity program.
* Do not blame me for strange names and unsufficient comments :)
*/
class Shower {
  def fileName

  Shower(String fileName) {
    this.fileName = fileName
  }  

  def run() {
    println "Running for $fileName"
    URL url = this.getClass().getClassLoader().getResource(fileName)
    File f

    if(url == null) {
      f = new File(fileName)
    } else {
      f = new File(url.toURI())
    }

    if(f != null && f.exists()) {
      println "Yup, we load file '$fileName'"
      f.eachLine{
        if (it.startsWith('#') || it.trim().startsWith('#')) {
          // ignoring comment line
          return;
        }

        def arr = it.split(/\t/) 
        if(arr.length != 3) {
          println "Can't process line '$it' as it's not parsable"
          return;
        }
        // collect will call the method on the each item of array and this will be propagated to array
        arr.collect{it.trim()}
        println convertToTimeString(arr[0]).padRight(10) << convertToTimeString(arr[1]).padRight(10) << ' ' << arr[2]
      }
    } else {
      throw new RuntimeException("We are not able to load file with name '$fileName'")
    }
  }

  def convertToTimeString(String time) {
    // supposing to get string like 123,4 meaning 123.4 seconds
    time = time.replace(/,/, '.')
    def sec = Double.valueOf(time)
    // println "Going to convert time: $sec"
    def out;
  
    int hours = sec / 3600
    sec = sec % 3600
    int minutes = sec / 60
    int seconds = sec % 60
    return toStr(hours, minutes, seconds) 
  }

  def toStrWithNames(h, m, s) {
    def out = h > 0 ? "$out ${h}h" : out
    out = m > 0 ? "$out ${m}m" : out
    out = s > 0 ? "$out ${s}s" : out
    return  out
  }

  def toStr(h, m, s) {
    def out = h > 0 ? "${h}:" : ""
    m = String.valueOf(m).length() == 1 ? "0${m}" : m
    s = String.valueOf(s).length() == 1 ? "0${s}" : s
    return out << "${m}:${s}"
  }
  
  public static void main(String[] args) {
    def fileName = args.length > 0 ? args[0] : 'popisky.txt'
    def s = new Shower(fileName)
    s.run()
  }
}
